# OJB.properties -- configuration of the OJB runtime environment
# (c) 2001, Th. Mahler
#
###
#
# The repositoryFile entry tells OJB to use this fileas its standard mapping
# repository. If no path is specified the file is looked up in the working
# directory from that OJB was started.
#
repositoryFile=repository.xml
#
###
#
# The useServer entry determines if OJB runs in single VM or in client/server
# mode. The default value "false" launches single VM mode
#
useServer=false
#useServer=true
#
###
#
# The ConnectionFactoryClass entry determines which kind of ConnectionFactory
# is to be used within OJB. A ConnectionFactory is responsible for creating
# JDBC Connections. The default implementation supports two ways of obtaining
# Connections:
# 1. java.sql.DriverManager based construction
# 2. Datasources lookup up from the JNDI initial context.
# the proper way of obtaining a connection is configured in 
# JDBCConnectionDescriptor entries in the repository.xml file.
#
ConnectionFactoryClass=ojb.broker.accesslayer.ConnectionFactoryDefaultImpl
#
###
#
# The SequenceManagerClass entry determines the SequenceManager to be used
# The default implementation is not very elaborated. Implement a better
# version and tell OJB to use it here:
#
#SequenceManagerClass=ojb.broker.util.SequenceManagerDefaultImpl
# this is Rainers HighLow SequenceManager:
SequenceManagerClass=ojb.broker.util.SequenceManagerHighLowImpl
#
###
#
# The SequenceManagerGrabSize entry determines the number IDs allocated
# within each sequence. This parameter is useful only if you use the
# ojb.broker.util.SequenceManagerHighLowImpl.
#
SequenceManagerGrabSize=10
#
###
#
# The ObjectCacheClass entry tells OJB which concrete Cache implementation
# is to be used.
#
ObjectCacheClass=ojb.broker.cache.ObjectCacheDefaultImpl
#
###
#
# The LockManagerClass entry tells OJB which concrete LockManager
# implementation is to be used.
#
LockManagerClass=ojb.odmg.locking.LockManagerDefaultImpl
#
###
#
# The LockMapClass entry tells OJB which concrete LockMap
# implementation is to be used.
# If OJB is running in servermode it is recommended to use the
# PersistentLockMapImpl. It guarantees to provide Lockamanagement across
# multiple client JVMs.
# If not running in OJB server mode (e.g. in desktop apps, or in a servlet
# engine) it is save to use the InMemoryLockMapImpl. Using it will result
# in a large performance gain.
#
# LockMapClass=ojb.odmg.locking.PersistentLockMapImpl
LockMapClass=ojb.odmg.locking.InMemoryLockMapImpl
#
###
#
# The LoggerClass entry tells OJB which concrete Logger
# implementation is to be used.
#
LoggerClass=ojb.broker.util.PoorMansLoggerImpl

# Bertrand implemented a log4j based logger:
#LoggerClass=ojb.broker.util.Log4jLoggerImpl
LoggerConfigFile=log4j.properties
#
###
#
# The LogLevel entries tells OJB which LogLevels are active
# for the different loggers used within OJB
# Loglevels: DEBUG < INFO < WARN < ERROR < FATAL
# That is loglevel WARN won't log DEBUG and INFO messages, 
# but will log WARN, ERROR, and FATAL messages
#
# The Default Logger
DEFAULT.LogLevel=WARN
# Logger for PersistenceBrokerImpl class
ojb.broker.singlevm.PersistenceBrokerImpl.LogLevel=WARN
# Logger for PersistenceBrokerFactory class
ojb.broker.PersistenceBrokerFactory.LogLevel=WARN
# Logger for PersistenceBrokerClient
ojb.broker.server.PersistenceBrokerClient.LogLevel=WARN
# Logger for Serverside RequestProcessor
ojb.broker.server.RequestProcessor.LogLevel=WARN
# Logger for BrokerPool
ojb.broker.server.BrokerPool.LogLevel=WARN
# Logger for RepositoryXmlHandler, useful for debugging parsing of repository.xml!
ojb.broker.metadata.RepositoryXmlHandler.LogLevel=WARN
# Logger for JdbcAccess, useful for debugging JDBC related problems
ojb.broker.accesslayer.JdbcAccess.LogLevel=WARN
# Logger for RsIterator, useful for debugging problems with Object materialization
ojb.broker.accesslayer.RsIterator.LogLevel=WARN
# Logger for StatementsForClass, useful for debugging JDBC Connection related problems
ojb.broker.accesslayer.StatementsForClass.LogLevel=WARN
# Loger for SqlGenerator, useful for debugging generation of SQL
ojb.broker.accesslayer.SqlGenerator.LogLevel=WARN
# Logger for the ODMG Implementation
ODMG.LogLevel=WARN
# Logger for the performance tests
performance.LogLevel=INFO
# Logger for the soda api
soda.LogLevel=WARN

#
###
#
# The LockTimeout entry defines the maximum time in milliseconds
# that a lock may be hold. Defaults to 60000 = 1 minute
#
LockTimeout=60000
#
###
#
# The LockAssociations entry defines the behaviour for the OJB
# implicit locking feature. If set to WRITE (default) acquiring a write-
# lock on a given object x implies write locks on all objects associated
# to x. If set to READ implicit read-locks are acquired.
# Acquiring a read-lock on x thus allways results in implicit read-locks
# on all associated objects.
#
LockAssociations=WRITE
# LockAssociations=READ
#
#
###
#
# The OqlCollectionClass entry defines the collection type returned
# from OQL queries. By default this value is set to DListImpl.
# This will be good for most situations as DList allows maximum flexibility
# in a ODMG environment.
# Using DLists for large resultsets may be bad for application performance.
# For these scenarios you can use ArrayLists or Vectors.
# Important note: the collections class to be used MUST implement the
# interface ojb.broker.ManageableCollection.
#
OqlCollectionClass=ojb.odmg.collections.DListImpl
# OqlCollectionClass=ojb.broker.util.ManageableArrayList
# OqlCollectionClass=ojb.broker.util.ManageableVector
#
#
###
#
# The BokerServers entry is only evaluated if useServer=true.
# it declares a list of servers with their respective ports
# on that OJB PersistenceBrokerServer processes are running.
# The entries must be separated by commas.
#
BrokerServers=localhost\:2001
# BrokerServers=stella\:2001,luna\:2001
#
###
#
# The ServerThreadCount entry tells the PersistenceBrokerServer
# how many worker threads have to be started initially.
#
ServerThreadCount=10
#
###
#
# The BrokerPoolSize entry defines the number of PersistenceBrokers
# that reside in the BrokerPool of the PersistenceBrokerServer
#
BrokerPoolSize=10
#
###
#
# The ignoreAutoCommitExceptions entry defines if exceptions during
# Connection.setAutoCommit(...) are ignored or not
# The default is false. Setting this value to true will help you
# using the JdbcOdbcBridge eg. for MS ACCESS.
# ignoreAutoCommitExceptions=false
ignoreAutoCommitExceptions=true
#
###
#
# End of OJB.properties file








